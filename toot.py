from mastodon import Mastodon
import requests
import tempfile
import os
import json
import imgkit
from PIL import Image
from urllib.parse import quote
import random
import time
import datetime
from ansi2html import Ansi2HTMLConverter
import geojsonio

#print (__name__)


# https://shkspr.mobi/blog/2018/08/easy-guide-to-building-mastodon-bots/
# view files in /tmp: cd /tmp && python -m SimpleHTTPServer 8080
#   Set up Mastodon
mastodon = Mastodon(
    access_token = os.environ['MASTODON_ACCESS_TOKEN']
    ,api_base_url = os.environ['MASTODON_API_BASE_URL']
)
shouldIReallyPost=False
host=os.environ['GENERATOR_MICROSERVICES_HOST']
port=os.environ['GENERATOR_MICROSERVICES_PORT']

def guruProfessionGenerator():
    url = 'http://'+host+':'+port+'/guruProfession'
    response = requests.get(url)
    guruProfession=response.content.decode('utf8',errors='ignore').replace('"', '')
    print(guruProfession)
    mastodonmsg=guruProfession+"\nAutomagically #generated profession (probably best suited for #roleplaying characters) https://github.com/elbosso/generator-microservices"
    print(mastodonmsg)
    if shouldIReallyPost:
        mastodon.status_post(mastodonmsg)

def clickBaitGenerator():
    url = 'http://'+host+':'+port+'/clickBait'
    response = requests.get(url)

    clickbait=response.content.decode('utf8',errors='ignore').replace('"', '')
    print(clickbait)
    googlesearch="https://www.google.com/search?query="+quote(clickbait, safe='')
    print(googlesearch)
    mastodonmsg=clickbait+"\n"+googlesearch+"\nAutomagically #generated #clickbait  https://github.com/elbosso/generator-microservices"
    print(mastodonmsg)
    if shouldIReallyPost:
        mastodon.status_post(mastodonmsg)

def creditCardGenerator():
    url = 'http://'+host+':'+port+'/creditCard'
    response = requests.get(url)
    response.encoding = 'UTF-8'
    resp=response.json()
    resp=json.loads(str(resp).replace("\'", "\""))
    jsonpretty=json.dumps(resp, indent=2, ensure_ascii=False).encode('utf8')
    mastodonmsg=jsonpretty.decode()+"\nAutomagically #generated creditcard information https://github.com/elbosso/generator-microservices"
    print(mastodonmsg)
    if shouldIReallyPost:
        mastodon.status_post(mastodonmsg)

def fakeIdentityGenerator():
    url = 'http://'+host+':'+port+'/fakeIdentity'
    response = requests.get(url)
    response.encoding = 'UTF-8'
    resp=response.json()
    #print(resp)
    #print(str(resp))
    resp=json.loads(str(resp).replace("\'", "\""))
    #print(resp)
    jsonpretty=json.dumps(resp, indent=2, ensure_ascii=False).encode('utf8')
    #print(jsonpretty.decode())
    new_file, filename = tempfile.mkstemp(prefix="fakeIdentity",suffix=".html")
    try:
        with os.fdopen(new_file, 'w') as tmp:
            # do stuff with temp file
            tmp.write("<html style=\"html {font-size: 8px;}\"><head><meta charset=\"utf-8\"/></head><body><pre>"+jsonpretty.decode()+"</pre></body></html>")
        print(filename)
        new_img_file, imgfilename = tempfile.mkstemp(prefix="fakeIdentity",suffix=".png")
        options = {
                'format': 'png',
                'xvfb':'',
                'quiet':''
                }
        try:
            imgkit.from_url(filename, imgfilename,options=options)
            img_PIL = Image.open(imgfilename)
            img_PIL=img_PIL.convert('L') # convert image to black and white
            img_PIL.save(imgfilename)
            print(imgfilename)
            mastodonmsg='#generated fake identity (JSON, rendered as PNG because of mastodons limited file format support) https://github.com/elbosso/generator-microservices'
            print(mastodonmsg)
            if shouldIReallyPost:
                mastodon.status_post(mastodonmsg,media_ids=mastodon.media_post(imgfilename,"image/png"))
        finally:
            os.remove(imgfilename)
            pass
    finally:
        os.remove(filename)
        pass

    #message='fake identity as generated by https://github.com/elbosso/generator-microservices\n '+jsonpretty.decode()
    #n = 499
    #chunks = [message[i:i+n] for i in range(0, len(message), n)]
    ##for chunk in chunks:
    #    #print('#######')
    #    #print(chunk)
    #    mastodon.status_post(chunk)

def coloredBrickMazeImgGenerator():
    url='http://'+host+':'+port+'/dungeonMazeImg'
    new_file, filename = tempfile.mkstemp(prefix="dungeonMazeImg",suffix=".png")
    response=requests.get(url, stream=True)
    try:
        with os.fdopen(new_file, 'wb') as tmp:
            # do stuff with temp file
            tmp.write(response.content)
        print(filename)
        mastodonmsg = '#generated random maze with a sort of "brickish" appearance\nhttps://github.com/elbosso/generator-microservices'
        print(mastodonmsg)
        if shouldIReallyPost:
            mastodon.status_post(mastodonmsg,media_ids=mastodon.media_post(filename,"image/png"))
    finally:
        os.remove(filename)
        pass

def coloredMazeImgGenerator():
    url='http://'+host+':'+port+'/dungeonMazeImg?ThinWalls=true'
    new_file, filename = tempfile.mkstemp(prefix="dungeonMazeImg",suffix=".png")
    response=requests.get(url, stream=True)
    try:
        with os.fdopen(new_file, 'wb') as tmp:
            # do stuff with temp file
            tmp.write(response.content)
        print(filename)
        mastodonmsg = '#generated random maze\nhttps://github.com/elbosso/generator-microservices'
        print(mastodonmsg)
        if shouldIReallyPost:
            mastodon.status_post(mastodonmsg,media_ids=mastodon.media_post(filename,"image/png"))
    finally:
        os.remove(filename)
        pass

def grayBrickMazeImgGenerator():
    url='http://'+host+':'+port+'/dungeonMazeImg?WithSolution=false'
    new_file, filename = tempfile.mkstemp(prefix="dungeonMazeImg",suffix=".png")
    response=requests.get(url, stream=True)
    try:
        with os.fdopen(new_file, 'wb') as tmp:
            # do stuff with temp file
            tmp.write(response.content)
        print(filename)
        mastodonmsg = '#generated random maze with a sort of "brickish" appearance\nhttps://github.com/elbosso/generator-microservices'
        print(mastodonmsg)
        if shouldIReallyPost:
            mastodon.status_post(mastodonmsg,media_ids=mastodon.media_post(filename,"image/png"))
    finally:
        os.remove(filename)
        pass

def grayMazeImgGenerator():
    url='http://'+host+':'+port+'/dungeonMazeImg?WithSolution=false&ThinWalls=true'
    new_file, filename = tempfile.mkstemp(prefix="dungeonMazeImg",suffix=".png")
    response=requests.get(url, stream=True)
    try:
        with os.fdopen(new_file, 'wb') as tmp:
            # do stuff with temp file
            tmp.write(response.content)
        print(filename)
        mastodonmsg = '#generated random maze\nhttps://github.com/elbosso/generator-microservices'
        print(mastodonmsg)
        if shouldIReallyPost:
            mastodon.status_post(mastodonmsg,media_ids=mastodon.media_post(filename,"image/png"))
    finally:
        os.remove(filename)
        pass

def coloredBrickMultiagentTronImgGenerator():
    url='http://'+host+':'+port+'/dungeonMazeImg?WithSolution=true&ThinWalls=false&AllowBackTrack=false'
    new_file, filename = tempfile.mkstemp(prefix="dungeonMazeImg",suffix=".png")
    response=requests.get(url, stream=True)
    try:
        with os.fdopen(new_file, 'wb') as tmp:
            # do stuff with temp file
            tmp.write(response.content)
        print(filename)
        mastodonmsg = '#generated traces of the movement of several random #tron-like #agents with a sort of "brickish" appearance\nhttps://github.com/elbosso/generator-microservices'
        print(mastodonmsg)
        if shouldIReallyPost:
            mastodon.status_post(mastodonmsg,media_ids=mastodon.media_post(filename,"image/png"))
    finally:
        os.remove(filename)
        pass

def coloredMultiagentTronImgGenerator():
    url='http://'+host+':'+port+'/dungeonMazeImg?WithSolution=true&ThinWalls=true&AllowBackTrack=false'
    new_file, filename = tempfile.mkstemp(prefix="dungeonMazeImg",suffix=".png")
    response=requests.get(url, stream=True)
    try:
        with os.fdopen(new_file, 'wb') as tmp:
            # do stuff with temp file
            tmp.write(response.content)
        print(filename)
        mastodonmsg = '#generated traces of the movement of several random #tron-like #agents\nhttps://github.com/elbosso/generator-microservices'
        print(mastodonmsg)
        if shouldIReallyPost:
            mastodon.status_post(mastodonmsg,media_ids=mastodon.media_post(filename,"image/png"))
    finally:
        os.remove(filename)
        pass

def coloredBrickDungeonImgGenerator():
    url='http://'+host+':'+port+'/dungeonMazeImg?WithSolution=true&ThinWalls=false&OnlyRectangularRooms=false&AllowBackTrack=true&WithRooms=true'
    new_file, filename = tempfile.mkstemp(prefix="dungeonMazeImg",suffix=".png")
    response=requests.get(url, stream=True)
    try:
        with os.fdopen(new_file, 'wb') as tmp:
            # do stuff with temp file
            tmp.write(response.content)
        print(filename)
        mastodonmsg = '#generated dungeon with a sort of "brickish" appearance\nhttps://github.com/elbosso/generator-microservices'
        print(mastodonmsg)
        if shouldIReallyPost:
            mastodon.status_post(mastodonmsg,media_ids=mastodon.media_post(filename,"image/png"))
    finally:
        os.remove(filename)
        pass

def brickDungeonImgGenerator():
    url='http://'+host+':'+port+'/dungeonMazeImg?WithSolution=false&ThinWalls=false&OnlyRectangularRooms=false&AllowBackTrack=true&WithRooms=true'
    new_file, filename = tempfile.mkstemp(prefix="dungeonMazeImg",suffix=".png")
    response=requests.get(url, stream=True)
    try:
        with os.fdopen(new_file, 'wb') as tmp:
            # do stuff with temp file
            tmp.write(response.content)
        print(filename)
        mastodonmsg = '#generated dungeon with a sort of "brickish" appearance\nhttps://github.com/elbosso/generator-microservices'
        print(mastodonmsg)
        if shouldIReallyPost:
            mastodon.status_post(mastodonmsg,media_ids=mastodon.media_post(filename,"image/png"))
    finally:
        os.remove(filename)
        pass

def coloredDungeonImgGenerator():
    url='http://'+host+':'+port+'/dungeonMazeImg?WithSolution=true&ThinWalls=true&OnlyRectangularRooms=false&AllowBackTrack=true&WithRooms=true'
    new_file, filename = tempfile.mkstemp(prefix="dungeonMazeImg",suffix=".png")
    response=requests.get(url, stream=True)
    try:
        with os.fdopen(new_file, 'wb') as tmp:
            # do stuff with temp file
            tmp.write(response.content)
        print(filename)
        mastodonmsg = '#generated dungeon\nhttps://github.com/elbosso/generator-microservices'
        print(mastodonmsg)
        if shouldIReallyPost:
            mastodon.status_post(mastodonmsg,media_ids=mastodon.media_post(filename,"image/png"))
    finally:
        os.remove(filename)
        pass

def dungeonImgGenerator():
    url='http://'+host+':'+port+'/dungeonMazeImg?WithSolution=false&ThinWalls=true&OnlyRectangularRooms=false&AllowBackTrack=true&WithRooms=true'
    new_file, filename = tempfile.mkstemp(prefix="dungeonMazeImg",suffix=".png")
    response=requests.get(url, stream=True)
    try:
        with os.fdopen(new_file, 'wb') as tmp:
            # do stuff with temp file
            tmp.write(response.content)
        print(filename)
        mastodonmsg = '#generated dungeon\nhttps://github.com/elbosso/generator-microservices'
        print(mastodonmsg)
        if shouldIReallyPost:
            mastodon.status_post(mastodonmsg,media_ids=mastodon.media_post(filename,"image/png"))
    finally:
        os.remove(filename)
        pass

def nonRectangularDungeonImgGenerator():
    url='http://'+host+':'+port+'/dungeonMazeImg?WithSolution=false&ThinWalls=true&OnlyRectangularRooms=false&AllowBackTrack=true&WithRooms=true&EllipticShape=true'
    new_file, filename = tempfile.mkstemp(prefix="nonRectangularDungeonImg",suffix=".png")
    response=requests.get(url, stream=True)
    try:
        with os.fdopen(new_file, 'wb') as tmp:
            # do stuff with temp file
            tmp.write(response.content)
        print(filename)
        mastodonmsg = '#generated dungeon\nhttps://github.com/elbosso/generator-microservices'
        print(mastodonmsg)
        if shouldIReallyPost:
            mastodon.status_post(mastodonmsg,media_ids=mastodon.media_post(filename,"image/png"))
    finally:
        os.remove(filename)
        pass

def avatarImgGenerator():
    url='http://'+host+':'+port+'/avatarImg'
    new_file, filename = tempfile.mkstemp(prefix="avatarImg",suffix=".png")
    response=requests.get(url, stream=True)
    try:
        with os.fdopen(new_file, 'wb') as tmp:
            # do stuff with temp file
            tmp.write(response.content)
        print(filename)
        if shouldIReallyPost:
            mastodon.account_update_credentials(avatar=filename)
    finally:
        os.remove(filename)

def vCardGenerator():
    url='http://'+host+':'+port+'/vCard'
    new_file, filename = tempfile.mkstemp(prefix="vCard",suffix=".html")
    response=requests.get(url, stream=True)
    try:
        s=response.content.decode('utf8',errors='ignore').replace("\\r\\n","\n")
        s=s[0:s.find("PHOTO;")]
        with os.fdopen(new_file, 'w') as tmp:
            # do stuff with temp file
            tmp.write("<html style=\"html {font-size: 8px;}\"><head><meta charset=\"utf-8\"/></head><body><pre>"+s+"</pre></body></html>")
        print(filename)
        new_img_file, imgfilename = tempfile.mkstemp(prefix="vCard",suffix=".png")
        options = {
                'format': 'png',
                'xvfb':'',
                'quiet':''
                }
        try:
            imgkit.from_url(filename, imgfilename,options=options)
            img_PIL = Image.open(imgfilename)
            img_PIL=img_PIL.convert('L') # convert image to black and white
            img_PIL.save(imgfilename)
            print(imgfilename)
            mastodonmsg = '#generated fake #vCard (#vcf, rendered as PNG because of mastodons limited file format support)\nhttps://github.com/elbosso/generator-microservices'
            print(mastodonmsg)
            if shouldIReallyPost:
                mastodon.status_post(mastodonmsg,media_ids=mastodon.media_post(imgfilename,"image/png"))
        finally:
            os.remove(imgfilename)
            pass
    finally:
        os.remove(filename)
        pass


def iCalGenerator():
    url = 'http://'+host+':'+port+'/iCal'
    new_file, filename = tempfile.mkstemp(prefix="iCal", suffix=".html")
    response = requests.get(url, stream=True)
    try:
        s = response.content.decode('utf8', errors='ignore').replace("\\r\\n", "\n")
        s = s[0:s.find("ATTACH;")]
        with os.fdopen(new_file, 'w') as tmp:
            # do stuff with temp file
            tmp.write(
                "<html style=\"html {font-size: 8px;}\"><head><meta charset=\"utf-8\"/></head><body><pre>" + s + "</pre></body></html>")
        print(filename)
        new_img_file, imgfilename = tempfile.mkstemp(prefix="iCal", suffix=".png")
        options = {
            'format': 'png',
            'xvfb': '',
            'quiet': ''
        }
        try:
            imgkit.from_url(filename, imgfilename, options=options)
            img_PIL = Image.open(imgfilename)
            img_PIL = img_PIL.convert('L')  # convert image to black and white
            img_PIL.save(imgfilename)
            print(imgfilename)
            mastodonmsg = '#generated fake #iCal appointment (#ics, rendered as PNG because of mastodons limited file format support)\nhttps://github.com/elbosso/generator-microservices'
            print(mastodonmsg)
            if shouldIReallyPost:
                mastodon.status_post(mastodonmsg, media_ids=mastodon.media_post(imgfilename, "image/png"))
        finally:
            os.remove(imgfilename)
            pass
    finally:
        os.remove(filename)
        pass


def dungeonMazeTextGenerator():
    url = 'http://'+host+':'+port+'/dungeonMazeText'
    new_file, filename = tempfile.mkstemp(prefix="dungeonmaze", suffix=".html")
    response = requests.get(url, stream=True)
    try:
        s = response.content.decode('utf8', errors='ignore').replace("\\n", "\n").replace("\"","")
        with os.fdopen(new_file, 'w') as tmp:
            # do stuff with temp file
            tmp.write(
                "<html style=\"html {font-size: 8px;}\"><head><meta charset=\"utf-8\"/></head><body><pre>" + s + "</pre></body></html>")
        print(filename)
        new_img_file, imgfilename = tempfile.mkstemp(prefix="dungeonmaze", suffix=".png")
        options = {
            'format': 'png',
            'xvfb': '',
            'quiet': ''
        }
        try:
            imgkit.from_url(filename, imgfilename, options=options)
            img_PIL = Image.open(imgfilename)
            img_PIL = img_PIL.convert('L')  # convert image to black and white
            img_PIL.save(imgfilename)
            print(imgfilename)
            mastodonmsg = '#generated #dungeon (rendered as PNG because of mastodons limited message length)\nhttps://github.com/elbosso/generator-microservices'
            print(mastodonmsg)
            if shouldIReallyPost:
                mastodon.status_post(mastodonmsg, media_ids=mastodon.media_post(imgfilename, "image/png"))
        finally:
            os.remove(imgfilename)
            pass
    finally:
        os.remove(filename)
        pass

def dungeonMazeTronTextGenerator():
    url = 'http://'+host+':'+port+'/dungeonMazeText?TronMode=true'
    new_file, filename = tempfile.mkstemp(prefix="dungeonmazetron", suffix=".html")
    response = requests.get(url, stream=True)
    try:
        s = response.content.decode('utf8', errors='ignore').replace("\\n", "\n").replace("\"","")
        with os.fdopen(new_file, 'w') as tmp:
            # do stuff with temp file
            tmp.write(
                "<html style=\"html {font-size: 8px;}\"><head><meta charset=\"utf-8\"/></head><body><pre>" + s + "</pre></body></html>")
        print(filename)
        new_img_file, imgfilename = tempfile.mkstemp(prefix="dungeonmazetron", suffix=".png")
        options = {
            'format': 'png',
            'xvfb': '',
            'quiet': ''
        }
        try:
            imgkit.from_url(filename, imgfilename, options=options)
            img_PIL = Image.open(imgfilename)
            img_PIL = img_PIL.convert('L')  # convert image to black and white
            img_PIL.save(imgfilename)
            print(imgfilename)
            mastodonmsg = '#generated tron-like traces (rendered as PNG because of mastodons limited message length)\nhttps://github.com/elbosso/generator-microservices'
            print(mastodonmsg)
            if shouldIReallyPost:
                mastodon.status_post(mastodonmsg, media_ids=mastodon.media_post(imgfilename, "image/png"))
        finally:
            os.remove(imgfilename)
            pass
    finally:
        os.remove(filename)
        pass

def coloredDungeonMazeTronTextGenerator():
    url = 'http://'+host+':'+port+'/dungeonMazeText?TronMode=true&AnsiEscapes=true'
    new_file, filename = tempfile.mkstemp(prefix="dungeonmazetron", suffix=".html")
    response = requests.get(url, stream=True)
    try:
        s = response.content.decode('utf8', errors='ignore').replace("\\n", "\n").replace("\"","").replace("\\u001B","\u001B")
        #print(s)
        conv = Ansi2HTMLConverter()
        html = conv.convert(s)
        with os.fdopen(new_file, 'w') as tmp:
            # do stuff with temp file
            tmp.write(html)
        print(filename)
        new_img_file, imgfilename = tempfile.mkstemp(prefix="dungeonmazetron", suffix=".png")
        options = {
            'format': 'png',
            'xvfb': '',
            'quiet': ''
        }
        try:
            imgkit.from_url(filename, imgfilename, options=options)
            img_PIL = Image.open(imgfilename)
            #img_PIL = img_PIL.convert('L')  # convert image to black and white
            img_PIL.save(imgfilename)
            print(imgfilename)
            mastodonmsg = '#generated tron-like traces using ansi codes for coloring (rendered as PNG because of mastodons limited file format support)\nhttps://github.com/elbosso/generator-microservices'
            print(mastodonmsg)
            if shouldIReallyPost:
                mastodon.status_post(mastodonmsg, media_ids=mastodon.media_post(imgfilename, "image/png"))
        finally:
            os.remove(imgfilename)
            pass
    finally:
        os.remove(filename)
        pass

def coloredDungeonMazeTextGenerator():
    url = 'http://'+host+':'+port+'/dungeonMazeText?TronMode=false&AnsiEscapes=true'
    new_file, filename = tempfile.mkstemp(prefix="dungeonmazetron", suffix=".html")
    response = requests.get(url, stream=True)
    try:
        s = response.content.decode('utf8', errors='ignore').replace("\\n", "\n").replace("\"","").replace("\\u001B","\u001B")
        #print(s)
        conv = Ansi2HTMLConverter()
        html = conv.convert(s)
        with os.fdopen(new_file, 'w') as tmp:
            # do stuff with temp file
            tmp.write(html)
        print(filename)
        new_img_file, imgfilename = tempfile.mkstemp(prefix="dungeonmazetron", suffix=".png")
        options = {
            'format': 'png',
            'xvfb': '',
            'quiet': ''
        }
        try:
            imgkit.from_url(filename, imgfilename, options=options)
            img_PIL = Image.open(imgfilename)
            #img_PIL = img_PIL.convert('L')  # convert image to black and white
            img_PIL.save(imgfilename)
            print(imgfilename)
            mastodonmsg = '#generated #dungeon as text using ansi codes for coloring (rendered as PNG because of mastodons limited file format support)\nhttps://github.com/elbosso/generator-microservices'
            print(mastodonmsg)
            if shouldIReallyPost:
                mastodon.status_post(mastodonmsg, media_ids=mastodon.media_post(imgfilename, "image/png"))
        finally:
            os.remove(imgfilename)
            pass
    finally:
        os.remove(filename)
        pass

def geoJsonGenerator():
    url = 'http://'+host+':'+port+'/placemarkGeoJson?Maxx=15&Minx=-10&Miny=0'
    response = requests.get(url)
    response.encoding = 'UTF-8'
    #print(response)
    resp=response.json()
    #print(resp)
    strjson=str(resp).replace("\'", "\"")
    resp=json.loads(strjson)
    #print(resp)
    jsonpretty=json.dumps(resp, indent=2, ensure_ascii=False).encode('utf8')
    url = geojsonio.make_url(strjson)
    #print(url)
    mastodonmsg=jsonpretty.decode()+"\nAutomagically #generated #geojson feature renders here "+url+" https://github.com/elbosso/generator-microservices"
    #print(mastodonmsg)
    if shouldIReallyPost:
        mastodon.status_post(mastodonmsg)

def quotationGenerator():
    url = 'http://'+host+':'+port+'/quotation'
    response = requests.get(url)
    response.encoding = 'UTF-8'
    #print(response)
    resp=response.json()
    #print(resp)
    strjson=str(resp).replace("\'", "\"")
    resp=json.loads(strjson)
    #print(resp)
    jsonpretty=json.dumps(resp, indent=2, ensure_ascii=False).encode('utf8')
    mastodonmsg=jsonpretty.decode()+"\nAutomagically #selected #quotation  https://github.com/elbosso/generator-microservices"
    print(mastodonmsg)
    if shouldIReallyPost:
        mastodon.status_post(mastodonmsg)

def texEquationGenerator():
    url = 'http://'+host+':'+port+'/texEquationSourceCode'
    response = requests.get(url)

    formula=response.content.decode('utf8',errors='ignore').replace('"', '').replace('\\\\','\\')
    #print(formula)
    mastodonmsg=formula+"\nAutomagically #generated #TeX equation  https://github.com/elbosso/generator-microservices"
    print(mastodonmsg)
    if shouldIReallyPost:
        mastodon.status_post(mastodonmsg)

def wangDominoImgGenerator():
    url='http://'+host+':'+port+'/wangDominoTilingImg'
    new_file, filename = tempfile.mkstemp(prefix="wangDominoTilingImg",suffix=".png")
    response=requests.get(url, stream=True)
    try:
        with os.fdopen(new_file, 'wb') as tmp:
            # do stuff with temp file
            tmp.write(response.content)
        print(filename)
        mastodonmsg = '#generated wang #tiling\nhttps://github.com/elbosso/generator-microservices'
        print(mastodonmsg)
        if shouldIReallyPost:
            mastodon.status_post(mastodonmsg,media_ids=mastodon.media_post(filename,"image/png"))
    finally:
        os.remove(filename)
        pass

def tunnelImgGenerator():
    url='http://'+host+':'+port+'/tunnelImg?Mode=3'
    new_file, filename = tempfile.mkstemp(prefix="tunnelImg",suffix=".png")
    response=requests.get(url, stream=True)
    try:
        with os.fdopen(new_file, 'wb') as tmp:
            # do stuff with temp file
            tmp.write(response.content)
        print(filename)
        mastodonmsg = '#generated tunnel made from simple geometric primitives in 3D\nhttps://github.com/elbosso/generator-microservices'
        print(mastodonmsg)
        if shouldIReallyPost:
            mastodon.status_post(mastodonmsg,media_ids=mastodon.media_post(filename,"image/png"))
    finally:
        os.remove(filename)
        pass

def tunnelOvalImgGenerator():
    url='http://'+host+':'+port+'/tunnelImg?Mode=7'
    new_file, filename = tempfile.mkstemp(prefix="tunnelOvalImg",suffix=".png")
    response=requests.get(url, stream=True)
    try:
        with os.fdopen(new_file, 'wb') as tmp:
            # do stuff with temp file
            tmp.write(response.content)
        print(filename)
        mastodonmsg = '#generated tunnel made from simple geometric primitives in 3D\nhttps://github.com/elbosso/generator-microservices'
        print(mastodonmsg)
        if shouldIReallyPost:
            mastodon.status_post(mastodonmsg,media_ids=mastodon.media_post(filename,"image/png"))
    finally:
        os.remove(filename)
        pass

def truchetTilingImgGenerator():
    url='http://'+host+':'+port+'/truchetTilingImg'
    new_file, filename = tempfile.mkstemp(prefix="truchetTilingImg",suffix=".png")
    response=requests.get(url, stream=True)
    try:
        with os.fdopen(new_file, 'wb') as tmp:
            # do stuff with temp file
            tmp.write(response.content)
        print(filename)
        mastodonmsg = '#generated multiscale truchet #tiling\nhttps://github.com/elbosso/generator-microservices'
        print(mastodonmsg)
        if shouldIReallyPost:
            mastodon.status_post(mastodonmsg,media_ids=mastodon.media_post(filename,"image/png"))
    finally:
        os.remove(filename)
        pass

def colorGenerator():
    url = 'http://'+host+':'+port+'/color'
    response = requests.get(url)
    response.encoding = 'UTF-8'
    resp=response.json()
    resp=json.loads(str(resp).replace("\'", "\""))
    jsonpretty=json.dumps(resp, indent=2, ensure_ascii=False).encode('utf8')
    mastodonmsg=jsonpretty.decode()+"\nAutomagically #generated #random colors https://github.com/elbosso/generator-microservices"
    print(mastodonmsg,len(mastodonmsg))
    if shouldIReallyPost:
        mastodon.status_post(mastodonmsg)

generators=[truchetTilingImgGenerator,tunnelOvalImgGenerator,tunnelImgGenerator,wangDominoImgGenerator,texEquationGenerator,nonRectangularDungeonImgGenerator,quotationGenerator,geoJsonGenerator,coloredDungeonMazeTextGenerator,coloredDungeonMazeTronTextGenerator,dungeonMazeTextGenerator,dungeonMazeTronTextGenerator,dungeonImgGenerator,coloredDungeonImgGenerator,brickDungeonImgGenerator,coloredBrickDungeonImgGenerator,coloredMultiagentTronImgGenerator,coloredBrickMultiagentTronImgGenerator,grayMazeImgGenerator,grayBrickMazeImgGenerator,coloredBrickMazeImgGenerator,creditCardGenerator,vCardGenerator,iCalGenerator,avatarImgGenerator,coloredMazeImgGenerator,guruProfessionGenerator,clickBaitGenerator,fakeIdentityGenerator,colorGenerator]
def test():
    colorGenerator()
    #truchetTilingImgGenerator()
    pass
def production():
    while True:
        index=random.randrange(len(generators))
        try:
            generators[index]()
        except:
            pass
        now = datetime.datetime.today()
        future=datetime.datetime.today()
        future += datetime.timedelta(hours=random.randrange(14,36,1))
        future += datetime.timedelta(minutes=random.randrange(60))
        print(future)
        time.sleep((future-now).total_seconds())

#print (__name__)
if __name__ == '__main__':
    print("production")
    shouldIReallyPost=True
    production()
else:
    print("test")
    shouldIReallyPost=False
    test()
